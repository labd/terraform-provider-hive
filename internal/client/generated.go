// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package client

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/Khan/genqlient/graphql"
)

// ActivateAppDeploymentActivateAppDeploymentActivateAppDeploymentResult includes the requested fields of the GraphQL type ActivateAppDeploymentResult.
type ActivateAppDeploymentActivateAppDeploymentActivateAppDeploymentResult struct {
	Ok    *ActivateAppDeploymentActivateAppDeploymentActivateAppDeploymentResultOkActivateAppDeploymentOk       `json:"ok"`
	Error *ActivateAppDeploymentActivateAppDeploymentActivateAppDeploymentResultErrorActivateAppDeploymentError `json:"error"`
}

// GetOk returns ActivateAppDeploymentActivateAppDeploymentActivateAppDeploymentResult.Ok, and is useful for accessing the field via an interface.
func (v *ActivateAppDeploymentActivateAppDeploymentActivateAppDeploymentResult) GetOk() *ActivateAppDeploymentActivateAppDeploymentActivateAppDeploymentResultOkActivateAppDeploymentOk {
	return v.Ok
}

// GetError returns ActivateAppDeploymentActivateAppDeploymentActivateAppDeploymentResult.Error, and is useful for accessing the field via an interface.
func (v *ActivateAppDeploymentActivateAppDeploymentActivateAppDeploymentResult) GetError() *ActivateAppDeploymentActivateAppDeploymentActivateAppDeploymentResultErrorActivateAppDeploymentError {
	return v.Error
}

// ActivateAppDeploymentActivateAppDeploymentActivateAppDeploymentResultErrorActivateAppDeploymentError includes the requested fields of the GraphQL type ActivateAppDeploymentError.
type ActivateAppDeploymentActivateAppDeploymentActivateAppDeploymentResultErrorActivateAppDeploymentError struct {
	Message string `json:"message"`
}

// GetMessage returns ActivateAppDeploymentActivateAppDeploymentActivateAppDeploymentResultErrorActivateAppDeploymentError.Message, and is useful for accessing the field via an interface.
func (v *ActivateAppDeploymentActivateAppDeploymentActivateAppDeploymentResultErrorActivateAppDeploymentError) GetMessage() string {
	return v.Message
}

// ActivateAppDeploymentActivateAppDeploymentActivateAppDeploymentResultOkActivateAppDeploymentOk includes the requested fields of the GraphQL type ActivateAppDeploymentOk.
type ActivateAppDeploymentActivateAppDeploymentActivateAppDeploymentResultOkActivateAppDeploymentOk struct {
	ActivatedAppDeployment ActivateAppDeploymentActivateAppDeploymentActivateAppDeploymentResultOkActivateAppDeploymentOkActivatedAppDeployment `json:"activatedAppDeployment"`
	// Whether the app deployment activation was skipped because it is already activated.
	IsSkipped bool `json:"isSkipped"`
}

// GetActivatedAppDeployment returns ActivateAppDeploymentActivateAppDeploymentActivateAppDeploymentResultOkActivateAppDeploymentOk.ActivatedAppDeployment, and is useful for accessing the field via an interface.
func (v *ActivateAppDeploymentActivateAppDeploymentActivateAppDeploymentResultOkActivateAppDeploymentOk) GetActivatedAppDeployment() ActivateAppDeploymentActivateAppDeploymentActivateAppDeploymentResultOkActivateAppDeploymentOkActivatedAppDeployment {
	return v.ActivatedAppDeployment
}

// GetIsSkipped returns ActivateAppDeploymentActivateAppDeploymentActivateAppDeploymentResultOkActivateAppDeploymentOk.IsSkipped, and is useful for accessing the field via an interface.
func (v *ActivateAppDeploymentActivateAppDeploymentActivateAppDeploymentResultOkActivateAppDeploymentOk) GetIsSkipped() bool {
	return v.IsSkipped
}

// ActivateAppDeploymentActivateAppDeploymentActivateAppDeploymentResultOkActivateAppDeploymentOkActivatedAppDeployment includes the requested fields of the GraphQL type AppDeployment.
type ActivateAppDeploymentActivateAppDeploymentActivateAppDeploymentResultOkActivateAppDeploymentOkActivatedAppDeployment struct {
	Id      string              `json:"id"`
	Name    string              `json:"name"`
	Version string              `json:"version"`
	Status  AppDeploymentStatus `json:"status"`
}

// GetId returns ActivateAppDeploymentActivateAppDeploymentActivateAppDeploymentResultOkActivateAppDeploymentOkActivatedAppDeployment.Id, and is useful for accessing the field via an interface.
func (v *ActivateAppDeploymentActivateAppDeploymentActivateAppDeploymentResultOkActivateAppDeploymentOkActivatedAppDeployment) GetId() string {
	return v.Id
}

// GetName returns ActivateAppDeploymentActivateAppDeploymentActivateAppDeploymentResultOkActivateAppDeploymentOkActivatedAppDeployment.Name, and is useful for accessing the field via an interface.
func (v *ActivateAppDeploymentActivateAppDeploymentActivateAppDeploymentResultOkActivateAppDeploymentOkActivatedAppDeployment) GetName() string {
	return v.Name
}

// GetVersion returns ActivateAppDeploymentActivateAppDeploymentActivateAppDeploymentResultOkActivateAppDeploymentOkActivatedAppDeployment.Version, and is useful for accessing the field via an interface.
func (v *ActivateAppDeploymentActivateAppDeploymentActivateAppDeploymentResultOkActivateAppDeploymentOkActivatedAppDeployment) GetVersion() string {
	return v.Version
}

// GetStatus returns ActivateAppDeploymentActivateAppDeploymentActivateAppDeploymentResultOkActivateAppDeploymentOkActivatedAppDeployment.Status, and is useful for accessing the field via an interface.
func (v *ActivateAppDeploymentActivateAppDeploymentActivateAppDeploymentResultOkActivateAppDeploymentOkActivatedAppDeployment) GetStatus() AppDeploymentStatus {
	return v.Status
}

type ActivateAppDeploymentInput struct {
	AppName    string                `json:"appName"`
	AppVersion string                `json:"appVersion"`
	Target     *TargetReferenceInput `json:"target,omitempty"`
}

// GetAppName returns ActivateAppDeploymentInput.AppName, and is useful for accessing the field via an interface.
func (v *ActivateAppDeploymentInput) GetAppName() string { return v.AppName }

// GetAppVersion returns ActivateAppDeploymentInput.AppVersion, and is useful for accessing the field via an interface.
func (v *ActivateAppDeploymentInput) GetAppVersion() string { return v.AppVersion }

// GetTarget returns ActivateAppDeploymentInput.Target, and is useful for accessing the field via an interface.
func (v *ActivateAppDeploymentInput) GetTarget() *TargetReferenceInput { return v.Target }

// ActivateAppDeploymentResponse is returned by ActivateAppDeployment on success.
type ActivateAppDeploymentResponse struct {
	ActivateAppDeployment ActivateAppDeploymentActivateAppDeploymentActivateAppDeploymentResult `json:"activateAppDeployment"`
}

// GetActivateAppDeployment returns ActivateAppDeploymentResponse.ActivateAppDeployment, and is useful for accessing the field via an interface.
func (v *ActivateAppDeploymentResponse) GetActivateAppDeployment() ActivateAppDeploymentActivateAppDeploymentActivateAppDeploymentResult {
	return v.ActivateAppDeployment
}

// AddDocumentsToAppDeploymentAddDocumentsToAppDeploymentAddDocumentsToAppDeploymentResult includes the requested fields of the GraphQL type AddDocumentsToAppDeploymentResult.
type AddDocumentsToAppDeploymentAddDocumentsToAppDeploymentAddDocumentsToAppDeploymentResult struct {
	Ok    *AddDocumentsToAppDeploymentAddDocumentsToAppDeploymentAddDocumentsToAppDeploymentResultOkAddDocumentsToAppDeploymentOk       `json:"ok"`
	Error *AddDocumentsToAppDeploymentAddDocumentsToAppDeploymentAddDocumentsToAppDeploymentResultErrorAddDocumentsToAppDeploymentError `json:"error"`
}

// GetOk returns AddDocumentsToAppDeploymentAddDocumentsToAppDeploymentAddDocumentsToAppDeploymentResult.Ok, and is useful for accessing the field via an interface.
func (v *AddDocumentsToAppDeploymentAddDocumentsToAppDeploymentAddDocumentsToAppDeploymentResult) GetOk() *AddDocumentsToAppDeploymentAddDocumentsToAppDeploymentAddDocumentsToAppDeploymentResultOkAddDocumentsToAppDeploymentOk {
	return v.Ok
}

// GetError returns AddDocumentsToAppDeploymentAddDocumentsToAppDeploymentAddDocumentsToAppDeploymentResult.Error, and is useful for accessing the field via an interface.
func (v *AddDocumentsToAppDeploymentAddDocumentsToAppDeploymentAddDocumentsToAppDeploymentResult) GetError() *AddDocumentsToAppDeploymentAddDocumentsToAppDeploymentAddDocumentsToAppDeploymentResultErrorAddDocumentsToAppDeploymentError {
	return v.Error
}

// AddDocumentsToAppDeploymentAddDocumentsToAppDeploymentAddDocumentsToAppDeploymentResultErrorAddDocumentsToAppDeploymentError includes the requested fields of the GraphQL type AddDocumentsToAppDeploymentError.
type AddDocumentsToAppDeploymentAddDocumentsToAppDeploymentAddDocumentsToAppDeploymentResultErrorAddDocumentsToAppDeploymentError struct {
	Message string `json:"message"`
	// Optional details if the error is related to a specific document.
	Details AddDocumentsToAppDeploymentAddDocumentsToAppDeploymentAddDocumentsToAppDeploymentResultErrorAddDocumentsToAppDeploymentErrorDetails `json:"details"`
}

// GetMessage returns AddDocumentsToAppDeploymentAddDocumentsToAppDeploymentAddDocumentsToAppDeploymentResultErrorAddDocumentsToAppDeploymentError.Message, and is useful for accessing the field via an interface.
func (v *AddDocumentsToAppDeploymentAddDocumentsToAppDeploymentAddDocumentsToAppDeploymentResultErrorAddDocumentsToAppDeploymentError) GetMessage() string {
	return v.Message
}

// GetDetails returns AddDocumentsToAppDeploymentAddDocumentsToAppDeploymentAddDocumentsToAppDeploymentResultErrorAddDocumentsToAppDeploymentError.Details, and is useful for accessing the field via an interface.
func (v *AddDocumentsToAppDeploymentAddDocumentsToAppDeploymentAddDocumentsToAppDeploymentResultErrorAddDocumentsToAppDeploymentError) GetDetails() AddDocumentsToAppDeploymentAddDocumentsToAppDeploymentAddDocumentsToAppDeploymentResultErrorAddDocumentsToAppDeploymentErrorDetails {
	return v.Details
}

// AddDocumentsToAppDeploymentAddDocumentsToAppDeploymentAddDocumentsToAppDeploymentResultErrorAddDocumentsToAppDeploymentErrorDetails includes the requested fields of the GraphQL type AddDocumentsToAppDeploymentErrorDetails.
type AddDocumentsToAppDeploymentAddDocumentsToAppDeploymentAddDocumentsToAppDeploymentResultErrorAddDocumentsToAppDeploymentErrorDetails struct {
	// Index of the document sent from the client.
	Index int `json:"index"`
	// Error message for the document at the given index.
	Message  string `json:"message"`
	Typename string `json:"__typename"`
}

// GetIndex returns AddDocumentsToAppDeploymentAddDocumentsToAppDeploymentAddDocumentsToAppDeploymentResultErrorAddDocumentsToAppDeploymentErrorDetails.Index, and is useful for accessing the field via an interface.
func (v *AddDocumentsToAppDeploymentAddDocumentsToAppDeploymentAddDocumentsToAppDeploymentResultErrorAddDocumentsToAppDeploymentErrorDetails) GetIndex() int {
	return v.Index
}

// GetMessage returns AddDocumentsToAppDeploymentAddDocumentsToAppDeploymentAddDocumentsToAppDeploymentResultErrorAddDocumentsToAppDeploymentErrorDetails.Message, and is useful for accessing the field via an interface.
func (v *AddDocumentsToAppDeploymentAddDocumentsToAppDeploymentAddDocumentsToAppDeploymentResultErrorAddDocumentsToAppDeploymentErrorDetails) GetMessage() string {
	return v.Message
}

// GetTypename returns AddDocumentsToAppDeploymentAddDocumentsToAppDeploymentAddDocumentsToAppDeploymentResultErrorAddDocumentsToAppDeploymentErrorDetails.Typename, and is useful for accessing the field via an interface.
func (v *AddDocumentsToAppDeploymentAddDocumentsToAppDeploymentAddDocumentsToAppDeploymentResultErrorAddDocumentsToAppDeploymentErrorDetails) GetTypename() string {
	return v.Typename
}

// AddDocumentsToAppDeploymentAddDocumentsToAppDeploymentAddDocumentsToAppDeploymentResultOkAddDocumentsToAppDeploymentOk includes the requested fields of the GraphQL type AddDocumentsToAppDeploymentOk.
type AddDocumentsToAppDeploymentAddDocumentsToAppDeploymentAddDocumentsToAppDeploymentResultOkAddDocumentsToAppDeploymentOk struct {
	AppDeployment AddDocumentsToAppDeploymentAddDocumentsToAppDeploymentAddDocumentsToAppDeploymentResultOkAddDocumentsToAppDeploymentOkAppDeployment `json:"appDeployment"`
}

// GetAppDeployment returns AddDocumentsToAppDeploymentAddDocumentsToAppDeploymentAddDocumentsToAppDeploymentResultOkAddDocumentsToAppDeploymentOk.AppDeployment, and is useful for accessing the field via an interface.
func (v *AddDocumentsToAppDeploymentAddDocumentsToAppDeploymentAddDocumentsToAppDeploymentResultOkAddDocumentsToAppDeploymentOk) GetAppDeployment() AddDocumentsToAppDeploymentAddDocumentsToAppDeploymentAddDocumentsToAppDeploymentResultOkAddDocumentsToAppDeploymentOkAppDeployment {
	return v.AppDeployment
}

// AddDocumentsToAppDeploymentAddDocumentsToAppDeploymentAddDocumentsToAppDeploymentResultOkAddDocumentsToAppDeploymentOkAppDeployment includes the requested fields of the GraphQL type AppDeployment.
type AddDocumentsToAppDeploymentAddDocumentsToAppDeploymentAddDocumentsToAppDeploymentResultOkAddDocumentsToAppDeploymentOkAppDeployment struct {
	Id      string              `json:"id"`
	Name    string              `json:"name"`
	Version string              `json:"version"`
	Status  AppDeploymentStatus `json:"status"`
}

// GetId returns AddDocumentsToAppDeploymentAddDocumentsToAppDeploymentAddDocumentsToAppDeploymentResultOkAddDocumentsToAppDeploymentOkAppDeployment.Id, and is useful for accessing the field via an interface.
func (v *AddDocumentsToAppDeploymentAddDocumentsToAppDeploymentAddDocumentsToAppDeploymentResultOkAddDocumentsToAppDeploymentOkAppDeployment) GetId() string {
	return v.Id
}

// GetName returns AddDocumentsToAppDeploymentAddDocumentsToAppDeploymentAddDocumentsToAppDeploymentResultOkAddDocumentsToAppDeploymentOkAppDeployment.Name, and is useful for accessing the field via an interface.
func (v *AddDocumentsToAppDeploymentAddDocumentsToAppDeploymentAddDocumentsToAppDeploymentResultOkAddDocumentsToAppDeploymentOkAppDeployment) GetName() string {
	return v.Name
}

// GetVersion returns AddDocumentsToAppDeploymentAddDocumentsToAppDeploymentAddDocumentsToAppDeploymentResultOkAddDocumentsToAppDeploymentOkAppDeployment.Version, and is useful for accessing the field via an interface.
func (v *AddDocumentsToAppDeploymentAddDocumentsToAppDeploymentAddDocumentsToAppDeploymentResultOkAddDocumentsToAppDeploymentOkAppDeployment) GetVersion() string {
	return v.Version
}

// GetStatus returns AddDocumentsToAppDeploymentAddDocumentsToAppDeploymentAddDocumentsToAppDeploymentResultOkAddDocumentsToAppDeploymentOkAppDeployment.Status, and is useful for accessing the field via an interface.
func (v *AddDocumentsToAppDeploymentAddDocumentsToAppDeploymentAddDocumentsToAppDeploymentResultOkAddDocumentsToAppDeploymentOkAppDeployment) GetStatus() AppDeploymentStatus {
	return v.Status
}

type AddDocumentsToAppDeploymentInput struct {
	// Name of the app.
	AppName string `json:"appName"`
	// The version of the app
	AppVersion string `json:"appVersion"`
	// A list of operations to add to the app deployment. (max 100 per single batch)
	Documents []DocumentInput       `json:"documents"`
	Target    *TargetReferenceInput `json:"target,omitempty"`
}

// GetAppName returns AddDocumentsToAppDeploymentInput.AppName, and is useful for accessing the field via an interface.
func (v *AddDocumentsToAppDeploymentInput) GetAppName() string { return v.AppName }

// GetAppVersion returns AddDocumentsToAppDeploymentInput.AppVersion, and is useful for accessing the field via an interface.
func (v *AddDocumentsToAppDeploymentInput) GetAppVersion() string { return v.AppVersion }

// GetDocuments returns AddDocumentsToAppDeploymentInput.Documents, and is useful for accessing the field via an interface.
func (v *AddDocumentsToAppDeploymentInput) GetDocuments() []DocumentInput { return v.Documents }

// GetTarget returns AddDocumentsToAppDeploymentInput.Target, and is useful for accessing the field via an interface.
func (v *AddDocumentsToAppDeploymentInput) GetTarget() *TargetReferenceInput { return v.Target }

// AddDocumentsToAppDeploymentResponse is returned by AddDocumentsToAppDeployment on success.
type AddDocumentsToAppDeploymentResponse struct {
	AddDocumentsToAppDeployment AddDocumentsToAppDeploymentAddDocumentsToAppDeploymentAddDocumentsToAppDeploymentResult `json:"addDocumentsToAppDeployment"`
}

// GetAddDocumentsToAppDeployment returns AddDocumentsToAppDeploymentResponse.AddDocumentsToAppDeployment, and is useful for accessing the field via an interface.
func (v *AddDocumentsToAppDeploymentResponse) GetAddDocumentsToAppDeployment() AddDocumentsToAppDeploymentAddDocumentsToAppDeploymentAddDocumentsToAppDeploymentResult {
	return v.AddDocumentsToAppDeployment
}

type AppDeploymentStatus string

const (
	AppDeploymentStatusActive  AppDeploymentStatus = "active"
	AppDeploymentStatusPending AppDeploymentStatus = "pending"
	AppDeploymentStatusRetired AppDeploymentStatus = "retired"
)

var AllAppDeploymentStatus = []AppDeploymentStatus{
	AppDeploymentStatusActive,
	AppDeploymentStatusPending,
	AppDeploymentStatusRetired,
}

// CreateAppDeploymentCreateAppDeploymentCreateAppDeploymentResult includes the requested fields of the GraphQL type CreateAppDeploymentResult.
type CreateAppDeploymentCreateAppDeploymentCreateAppDeploymentResult struct {
	Ok    *CreateAppDeploymentCreateAppDeploymentCreateAppDeploymentResultOkCreateAppDeploymentOk       `json:"ok"`
	Error *CreateAppDeploymentCreateAppDeploymentCreateAppDeploymentResultErrorCreateAppDeploymentError `json:"error"`
}

// GetOk returns CreateAppDeploymentCreateAppDeploymentCreateAppDeploymentResult.Ok, and is useful for accessing the field via an interface.
func (v *CreateAppDeploymentCreateAppDeploymentCreateAppDeploymentResult) GetOk() *CreateAppDeploymentCreateAppDeploymentCreateAppDeploymentResultOkCreateAppDeploymentOk {
	return v.Ok
}

// GetError returns CreateAppDeploymentCreateAppDeploymentCreateAppDeploymentResult.Error, and is useful for accessing the field via an interface.
func (v *CreateAppDeploymentCreateAppDeploymentCreateAppDeploymentResult) GetError() *CreateAppDeploymentCreateAppDeploymentCreateAppDeploymentResultErrorCreateAppDeploymentError {
	return v.Error
}

// CreateAppDeploymentCreateAppDeploymentCreateAppDeploymentResultErrorCreateAppDeploymentError includes the requested fields of the GraphQL type CreateAppDeploymentError.
type CreateAppDeploymentCreateAppDeploymentCreateAppDeploymentResultErrorCreateAppDeploymentError struct {
	Message string `json:"message"`
}

// GetMessage returns CreateAppDeploymentCreateAppDeploymentCreateAppDeploymentResultErrorCreateAppDeploymentError.Message, and is useful for accessing the field via an interface.
func (v *CreateAppDeploymentCreateAppDeploymentCreateAppDeploymentResultErrorCreateAppDeploymentError) GetMessage() string {
	return v.Message
}

// CreateAppDeploymentCreateAppDeploymentCreateAppDeploymentResultOkCreateAppDeploymentOk includes the requested fields of the GraphQL type CreateAppDeploymentOk.
type CreateAppDeploymentCreateAppDeploymentCreateAppDeploymentResultOkCreateAppDeploymentOk struct {
	CreatedAppDeployment CreateAppDeploymentCreateAppDeploymentCreateAppDeploymentResultOkCreateAppDeploymentOkCreatedAppDeployment `json:"createdAppDeployment"`
}

// GetCreatedAppDeployment returns CreateAppDeploymentCreateAppDeploymentCreateAppDeploymentResultOkCreateAppDeploymentOk.CreatedAppDeployment, and is useful for accessing the field via an interface.
func (v *CreateAppDeploymentCreateAppDeploymentCreateAppDeploymentResultOkCreateAppDeploymentOk) GetCreatedAppDeployment() CreateAppDeploymentCreateAppDeploymentCreateAppDeploymentResultOkCreateAppDeploymentOkCreatedAppDeployment {
	return v.CreatedAppDeployment
}

// CreateAppDeploymentCreateAppDeploymentCreateAppDeploymentResultOkCreateAppDeploymentOkCreatedAppDeployment includes the requested fields of the GraphQL type AppDeployment.
type CreateAppDeploymentCreateAppDeploymentCreateAppDeploymentResultOkCreateAppDeploymentOkCreatedAppDeployment struct {
	Id      string              `json:"id"`
	Name    string              `json:"name"`
	Version string              `json:"version"`
	Status  AppDeploymentStatus `json:"status"`
}

// GetId returns CreateAppDeploymentCreateAppDeploymentCreateAppDeploymentResultOkCreateAppDeploymentOkCreatedAppDeployment.Id, and is useful for accessing the field via an interface.
func (v *CreateAppDeploymentCreateAppDeploymentCreateAppDeploymentResultOkCreateAppDeploymentOkCreatedAppDeployment) GetId() string {
	return v.Id
}

// GetName returns CreateAppDeploymentCreateAppDeploymentCreateAppDeploymentResultOkCreateAppDeploymentOkCreatedAppDeployment.Name, and is useful for accessing the field via an interface.
func (v *CreateAppDeploymentCreateAppDeploymentCreateAppDeploymentResultOkCreateAppDeploymentOkCreatedAppDeployment) GetName() string {
	return v.Name
}

// GetVersion returns CreateAppDeploymentCreateAppDeploymentCreateAppDeploymentResultOkCreateAppDeploymentOkCreatedAppDeployment.Version, and is useful for accessing the field via an interface.
func (v *CreateAppDeploymentCreateAppDeploymentCreateAppDeploymentResultOkCreateAppDeploymentOkCreatedAppDeployment) GetVersion() string {
	return v.Version
}

// GetStatus returns CreateAppDeploymentCreateAppDeploymentCreateAppDeploymentResultOkCreateAppDeploymentOkCreatedAppDeployment.Status, and is useful for accessing the field via an interface.
func (v *CreateAppDeploymentCreateAppDeploymentCreateAppDeploymentResultOkCreateAppDeploymentOkCreatedAppDeployment) GetStatus() AppDeploymentStatus {
	return v.Status
}

type CreateAppDeploymentInput struct {
	AppName    string                `json:"appName"`
	AppVersion string                `json:"appVersion"`
	Target     *TargetReferenceInput `json:"target,omitempty"`
}

// GetAppName returns CreateAppDeploymentInput.AppName, and is useful for accessing the field via an interface.
func (v *CreateAppDeploymentInput) GetAppName() string { return v.AppName }

// GetAppVersion returns CreateAppDeploymentInput.AppVersion, and is useful for accessing the field via an interface.
func (v *CreateAppDeploymentInput) GetAppVersion() string { return v.AppVersion }

// GetTarget returns CreateAppDeploymentInput.Target, and is useful for accessing the field via an interface.
func (v *CreateAppDeploymentInput) GetTarget() *TargetReferenceInput { return v.Target }

// CreateAppDeploymentResponse is returned by CreateAppDeployment on success.
type CreateAppDeploymentResponse struct {
	CreateAppDeployment CreateAppDeploymentCreateAppDeploymentCreateAppDeploymentResult `json:"createAppDeployment"`
}

// GetCreateAppDeployment returns CreateAppDeploymentResponse.CreateAppDeployment, and is useful for accessing the field via an interface.
func (v *CreateAppDeploymentResponse) GetCreateAppDeployment() CreateAppDeploymentCreateAppDeploymentCreateAppDeploymentResult {
	return v.CreateAppDeployment
}

type DocumentInput struct {
	// GraphQL operation body.
	Body string `json:"body"`
	// GraphQL operation hash.
	Hash string `json:"hash"`
}

// GetBody returns DocumentInput.Body, and is useful for accessing the field via an interface.
func (v *DocumentInput) GetBody() string { return v.Body }

// GetHash returns DocumentInput.Hash, and is useful for accessing the field via an interface.
func (v *DocumentInput) GetHash() string { return v.Hash }

type GitHubSchemaCheckInput struct {
	Commit string `json:"commit"`
	// The pull request number of the schema check.
	PullRequestNumber string `json:"pullRequestNumber"`
	// The repository name of the schema check.
	Repository string `json:"repository"`
}

// GetCommit returns GitHubSchemaCheckInput.Commit, and is useful for accessing the field via an interface.
func (v *GitHubSchemaCheckInput) GetCommit() string { return v.Commit }

// GetPullRequestNumber returns GitHubSchemaCheckInput.PullRequestNumber, and is useful for accessing the field via an interface.
func (v *GitHubSchemaCheckInput) GetPullRequestNumber() string { return v.PullRequestNumber }

// GetRepository returns GitHubSchemaCheckInput.Repository, and is useful for accessing the field via an interface.
func (v *GitHubSchemaCheckInput) GetRepository() string { return v.Repository }

type SchemaCheckInput struct {
	// Optional context ID to group schema checks together.
	// Manually approved breaking changes will be memorized for schema checks with the same context id.
	ContextId string                  `json:"contextId,omitempty"`
	Github    *GitHubSchemaCheckInput `json:"github,omitempty"`
	Meta      *SchemaCheckMetaInput   `json:"meta,omitempty"`
	Sdl       string                  `json:"sdl"`
	Service   string                  `json:"service"`
	Target    *TargetReferenceInput   `json:"target,omitempty"`
}

// GetContextId returns SchemaCheckInput.ContextId, and is useful for accessing the field via an interface.
func (v *SchemaCheckInput) GetContextId() string { return v.ContextId }

// GetGithub returns SchemaCheckInput.Github, and is useful for accessing the field via an interface.
func (v *SchemaCheckInput) GetGithub() *GitHubSchemaCheckInput { return v.Github }

// GetMeta returns SchemaCheckInput.Meta, and is useful for accessing the field via an interface.
func (v *SchemaCheckInput) GetMeta() *SchemaCheckMetaInput { return v.Meta }

// GetSdl returns SchemaCheckInput.Sdl, and is useful for accessing the field via an interface.
func (v *SchemaCheckInput) GetSdl() string { return v.Sdl }

// GetService returns SchemaCheckInput.Service, and is useful for accessing the field via an interface.
func (v *SchemaCheckInput) GetService() string { return v.Service }

// GetTarget returns SchemaCheckInput.Target, and is useful for accessing the field via an interface.
func (v *SchemaCheckInput) GetTarget() *TargetReferenceInput { return v.Target }

type SchemaCheckMetaInput struct {
	Author string `json:"author"`
	Commit string `json:"commit"`
}

// GetAuthor returns SchemaCheckMetaInput.Author, and is useful for accessing the field via an interface.
func (v *SchemaCheckMetaInput) GetAuthor() string { return v.Author }

// GetCommit returns SchemaCheckMetaInput.Commit, and is useful for accessing the field via an interface.
func (v *SchemaCheckMetaInput) GetCommit() string { return v.Commit }

// SchemaCheckResponse is returned by SchemaCheck on success.
type SchemaCheckResponse struct {
	SchemaCheck SchemaCheckSchemaCheckSchemaCheckPayload `json:"-"`
}

// GetSchemaCheck returns SchemaCheckResponse.SchemaCheck, and is useful for accessing the field via an interface.
func (v *SchemaCheckResponse) GetSchemaCheck() SchemaCheckSchemaCheckSchemaCheckPayload {
	return v.SchemaCheck
}

func (v *SchemaCheckResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*SchemaCheckResponse
		SchemaCheck json.RawMessage `json:"schemaCheck"`
		graphql.NoUnmarshalJSON
	}
	firstPass.SchemaCheckResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.SchemaCheck
		src := firstPass.SchemaCheck
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalSchemaCheckSchemaCheckSchemaCheckPayload(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal SchemaCheckResponse.SchemaCheck: %w", err)
			}
		}
	}
	return nil
}

type __premarshalSchemaCheckResponse struct {
	SchemaCheck json.RawMessage `json:"schemaCheck"`
}

func (v *SchemaCheckResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *SchemaCheckResponse) __premarshalJSON() (*__premarshalSchemaCheckResponse, error) {
	var retval __premarshalSchemaCheckResponse

	{

		dst := &retval.SchemaCheck
		src := v.SchemaCheck
		var err error
		*dst, err = __marshalSchemaCheckSchemaCheckSchemaCheckPayload(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal SchemaCheckResponse.SchemaCheck: %w", err)
		}
	}
	return &retval, nil
}

// SchemaCheckSchemaCheckGitHubSchemaCheckError includes the requested fields of the GraphQL type GitHubSchemaCheckError.
type SchemaCheckSchemaCheckGitHubSchemaCheckError struct {
	Typename string `json:"__typename"`
	Message  string `json:"message"`
}

// GetTypename returns SchemaCheckSchemaCheckGitHubSchemaCheckError.Typename, and is useful for accessing the field via an interface.
func (v *SchemaCheckSchemaCheckGitHubSchemaCheckError) GetTypename() string { return v.Typename }

// GetMessage returns SchemaCheckSchemaCheckGitHubSchemaCheckError.Message, and is useful for accessing the field via an interface.
func (v *SchemaCheckSchemaCheckGitHubSchemaCheckError) GetMessage() string { return v.Message }

// SchemaCheckSchemaCheckGitHubSchemaCheckSuccess includes the requested fields of the GraphQL type GitHubSchemaCheckSuccess.
type SchemaCheckSchemaCheckGitHubSchemaCheckSuccess struct {
	Typename string `json:"__typename"`
	Message  string `json:"message"`
}

// GetTypename returns SchemaCheckSchemaCheckGitHubSchemaCheckSuccess.Typename, and is useful for accessing the field via an interface.
func (v *SchemaCheckSchemaCheckGitHubSchemaCheckSuccess) GetTypename() string { return v.Typename }

// GetMessage returns SchemaCheckSchemaCheckGitHubSchemaCheckSuccess.Message, and is useful for accessing the field via an interface.
func (v *SchemaCheckSchemaCheckGitHubSchemaCheckSuccess) GetMessage() string { return v.Message }

// SchemaCheckSchemaCheckSchemaCheckError includes the requested fields of the GraphQL type SchemaCheckError.
type SchemaCheckSchemaCheckSchemaCheckError struct {
	Typename    string                                                            `json:"__typename"`
	Valid       bool                                                              `json:"valid"`
	Errors      SchemaCheckSchemaCheckSchemaCheckErrorErrorsSchemaErrorConnection `json:"errors"`
	SchemaCheck SchemaCheckSchemaCheckSchemaCheckErrorSchemaCheck                 `json:"-"`
}

// GetTypename returns SchemaCheckSchemaCheckSchemaCheckError.Typename, and is useful for accessing the field via an interface.
func (v *SchemaCheckSchemaCheckSchemaCheckError) GetTypename() string { return v.Typename }

// GetValid returns SchemaCheckSchemaCheckSchemaCheckError.Valid, and is useful for accessing the field via an interface.
func (v *SchemaCheckSchemaCheckSchemaCheckError) GetValid() bool { return v.Valid }

// GetErrors returns SchemaCheckSchemaCheckSchemaCheckError.Errors, and is useful for accessing the field via an interface.
func (v *SchemaCheckSchemaCheckSchemaCheckError) GetErrors() SchemaCheckSchemaCheckSchemaCheckErrorErrorsSchemaErrorConnection {
	return v.Errors
}

// GetSchemaCheck returns SchemaCheckSchemaCheckSchemaCheckError.SchemaCheck, and is useful for accessing the field via an interface.
func (v *SchemaCheckSchemaCheckSchemaCheckError) GetSchemaCheck() SchemaCheckSchemaCheckSchemaCheckErrorSchemaCheck {
	return v.SchemaCheck
}

func (v *SchemaCheckSchemaCheckSchemaCheckError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*SchemaCheckSchemaCheckSchemaCheckError
		SchemaCheck json.RawMessage `json:"schemaCheck"`
		graphql.NoUnmarshalJSON
	}
	firstPass.SchemaCheckSchemaCheckSchemaCheckError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.SchemaCheck
		src := firstPass.SchemaCheck
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalSchemaCheckSchemaCheckSchemaCheckErrorSchemaCheck(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal SchemaCheckSchemaCheckSchemaCheckError.SchemaCheck: %w", err)
			}
		}
	}
	return nil
}

type __premarshalSchemaCheckSchemaCheckSchemaCheckError struct {
	Typename string `json:"__typename"`

	Valid bool `json:"valid"`

	Errors SchemaCheckSchemaCheckSchemaCheckErrorErrorsSchemaErrorConnection `json:"errors"`

	SchemaCheck json.RawMessage `json:"schemaCheck"`
}

func (v *SchemaCheckSchemaCheckSchemaCheckError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *SchemaCheckSchemaCheckSchemaCheckError) __premarshalJSON() (*__premarshalSchemaCheckSchemaCheckSchemaCheckError, error) {
	var retval __premarshalSchemaCheckSchemaCheckSchemaCheckError

	retval.Typename = v.Typename
	retval.Valid = v.Valid
	retval.Errors = v.Errors
	{

		dst := &retval.SchemaCheck
		src := v.SchemaCheck
		var err error
		*dst, err = __marshalSchemaCheckSchemaCheckSchemaCheckErrorSchemaCheck(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal SchemaCheckSchemaCheckSchemaCheckError.SchemaCheck: %w", err)
		}
	}
	return &retval, nil
}

// SchemaCheckSchemaCheckSchemaCheckErrorErrorsSchemaErrorConnection includes the requested fields of the GraphQL type SchemaErrorConnection.
type SchemaCheckSchemaCheckSchemaCheckErrorErrorsSchemaErrorConnection struct {
	Nodes []SchemaCheckSchemaCheckSchemaCheckErrorErrorsSchemaErrorConnectionNodesSchemaError `json:"nodes"`
	Total int                                                                                 `json:"total"`
}

// GetNodes returns SchemaCheckSchemaCheckSchemaCheckErrorErrorsSchemaErrorConnection.Nodes, and is useful for accessing the field via an interface.
func (v *SchemaCheckSchemaCheckSchemaCheckErrorErrorsSchemaErrorConnection) GetNodes() []SchemaCheckSchemaCheckSchemaCheckErrorErrorsSchemaErrorConnectionNodesSchemaError {
	return v.Nodes
}

// GetTotal returns SchemaCheckSchemaCheckSchemaCheckErrorErrorsSchemaErrorConnection.Total, and is useful for accessing the field via an interface.
func (v *SchemaCheckSchemaCheckSchemaCheckErrorErrorsSchemaErrorConnection) GetTotal() int {
	return v.Total
}

// SchemaCheckSchemaCheckSchemaCheckErrorErrorsSchemaErrorConnectionNodesSchemaError includes the requested fields of the GraphQL type SchemaError.
type SchemaCheckSchemaCheckSchemaCheckErrorErrorsSchemaErrorConnectionNodesSchemaError struct {
	Message string `json:"message"`
}

// GetMessage returns SchemaCheckSchemaCheckSchemaCheckErrorErrorsSchemaErrorConnectionNodesSchemaError.Message, and is useful for accessing the field via an interface.
func (v *SchemaCheckSchemaCheckSchemaCheckErrorErrorsSchemaErrorConnectionNodesSchemaError) GetMessage() string {
	return v.Message
}

// SchemaCheckSchemaCheckSchemaCheckErrorSchemaCheck includes the requested fields of the GraphQL interface SchemaCheck.
//
// SchemaCheckSchemaCheckSchemaCheckErrorSchemaCheck is implemented by the following types:
// SchemaCheckSchemaCheckSchemaCheckErrorSchemaCheckFailedSchemaCheck
// SchemaCheckSchemaCheckSchemaCheckErrorSchemaCheckSuccessfulSchemaCheck
type SchemaCheckSchemaCheckSchemaCheckErrorSchemaCheck interface {
	implementsGraphQLInterfaceSchemaCheckSchemaCheckSchemaCheckErrorSchemaCheck()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	// GetId returns the interface-field "id" from its implementation.
	GetId() string
	// GetWebUrl returns the interface-field "webUrl" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// The URL of the schema check on the Hive Web App.
	GetWebUrl() string
}

func (v *SchemaCheckSchemaCheckSchemaCheckErrorSchemaCheckFailedSchemaCheck) implementsGraphQLInterfaceSchemaCheckSchemaCheckSchemaCheckErrorSchemaCheck() {
}
func (v *SchemaCheckSchemaCheckSchemaCheckErrorSchemaCheckSuccessfulSchemaCheck) implementsGraphQLInterfaceSchemaCheckSchemaCheckSchemaCheckErrorSchemaCheck() {
}

func __unmarshalSchemaCheckSchemaCheckSchemaCheckErrorSchemaCheck(b []byte, v *SchemaCheckSchemaCheckSchemaCheckErrorSchemaCheck) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "FailedSchemaCheck":
		*v = new(SchemaCheckSchemaCheckSchemaCheckErrorSchemaCheckFailedSchemaCheck)
		return json.Unmarshal(b, *v)
	case "SuccessfulSchemaCheck":
		*v = new(SchemaCheckSchemaCheckSchemaCheckErrorSchemaCheckSuccessfulSchemaCheck)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing SchemaCheck.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for SchemaCheckSchemaCheckSchemaCheckErrorSchemaCheck: "%v"`, tn.TypeName)
	}
}

func __marshalSchemaCheckSchemaCheckSchemaCheckErrorSchemaCheck(v *SchemaCheckSchemaCheckSchemaCheckErrorSchemaCheck) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *SchemaCheckSchemaCheckSchemaCheckErrorSchemaCheckFailedSchemaCheck:
		typename = "FailedSchemaCheck"

		result := struct {
			TypeName string `json:"__typename"`
			*SchemaCheckSchemaCheckSchemaCheckErrorSchemaCheckFailedSchemaCheck
		}{typename, v}
		return json.Marshal(result)
	case *SchemaCheckSchemaCheckSchemaCheckErrorSchemaCheckSuccessfulSchemaCheck:
		typename = "SuccessfulSchemaCheck"

		result := struct {
			TypeName string `json:"__typename"`
			*SchemaCheckSchemaCheckSchemaCheckErrorSchemaCheckSuccessfulSchemaCheck
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for SchemaCheckSchemaCheckSchemaCheckErrorSchemaCheck: "%T"`, v)
	}
}

// SchemaCheckSchemaCheckSchemaCheckErrorSchemaCheckFailedSchemaCheck includes the requested fields of the GraphQL type FailedSchemaCheck.
// The GraphQL type's documentation follows.
//
// A failed schema check.
type SchemaCheckSchemaCheckSchemaCheckErrorSchemaCheckFailedSchemaCheck struct {
	Typename string `json:"__typename"`
	Id       string `json:"id"`
	// The URL of the schema check on the Hive Web App.
	WebUrl string `json:"webUrl"`
}

// GetTypename returns SchemaCheckSchemaCheckSchemaCheckErrorSchemaCheckFailedSchemaCheck.Typename, and is useful for accessing the field via an interface.
func (v *SchemaCheckSchemaCheckSchemaCheckErrorSchemaCheckFailedSchemaCheck) GetTypename() string {
	return v.Typename
}

// GetId returns SchemaCheckSchemaCheckSchemaCheckErrorSchemaCheckFailedSchemaCheck.Id, and is useful for accessing the field via an interface.
func (v *SchemaCheckSchemaCheckSchemaCheckErrorSchemaCheckFailedSchemaCheck) GetId() string {
	return v.Id
}

// GetWebUrl returns SchemaCheckSchemaCheckSchemaCheckErrorSchemaCheckFailedSchemaCheck.WebUrl, and is useful for accessing the field via an interface.
func (v *SchemaCheckSchemaCheckSchemaCheckErrorSchemaCheckFailedSchemaCheck) GetWebUrl() string {
	return v.WebUrl
}

// SchemaCheckSchemaCheckSchemaCheckErrorSchemaCheckSuccessfulSchemaCheck includes the requested fields of the GraphQL type SuccessfulSchemaCheck.
// The GraphQL type's documentation follows.
//
// A successful schema check.
type SchemaCheckSchemaCheckSchemaCheckErrorSchemaCheckSuccessfulSchemaCheck struct {
	Typename string `json:"__typename"`
	Id       string `json:"id"`
	// The URL of the schema check on the Hive Web App.
	WebUrl string `json:"webUrl"`
}

// GetTypename returns SchemaCheckSchemaCheckSchemaCheckErrorSchemaCheckSuccessfulSchemaCheck.Typename, and is useful for accessing the field via an interface.
func (v *SchemaCheckSchemaCheckSchemaCheckErrorSchemaCheckSuccessfulSchemaCheck) GetTypename() string {
	return v.Typename
}

// GetId returns SchemaCheckSchemaCheckSchemaCheckErrorSchemaCheckSuccessfulSchemaCheck.Id, and is useful for accessing the field via an interface.
func (v *SchemaCheckSchemaCheckSchemaCheckErrorSchemaCheckSuccessfulSchemaCheck) GetId() string {
	return v.Id
}

// GetWebUrl returns SchemaCheckSchemaCheckSchemaCheckErrorSchemaCheckSuccessfulSchemaCheck.WebUrl, and is useful for accessing the field via an interface.
func (v *SchemaCheckSchemaCheckSchemaCheckErrorSchemaCheckSuccessfulSchemaCheck) GetWebUrl() string {
	return v.WebUrl
}

// SchemaCheckSchemaCheckSchemaCheckPayload includes the requested fields of the GraphQL interface SchemaCheckPayload.
//
// SchemaCheckSchemaCheckSchemaCheckPayload is implemented by the following types:
// SchemaCheckSchemaCheckGitHubSchemaCheckError
// SchemaCheckSchemaCheckGitHubSchemaCheckSuccess
// SchemaCheckSchemaCheckSchemaCheckError
// SchemaCheckSchemaCheckSchemaCheckSuccess
type SchemaCheckSchemaCheckSchemaCheckPayload interface {
	implementsGraphQLInterfaceSchemaCheckSchemaCheckSchemaCheckPayload()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *SchemaCheckSchemaCheckGitHubSchemaCheckError) implementsGraphQLInterfaceSchemaCheckSchemaCheckSchemaCheckPayload() {
}
func (v *SchemaCheckSchemaCheckGitHubSchemaCheckSuccess) implementsGraphQLInterfaceSchemaCheckSchemaCheckSchemaCheckPayload() {
}
func (v *SchemaCheckSchemaCheckSchemaCheckError) implementsGraphQLInterfaceSchemaCheckSchemaCheckSchemaCheckPayload() {
}
func (v *SchemaCheckSchemaCheckSchemaCheckSuccess) implementsGraphQLInterfaceSchemaCheckSchemaCheckSchemaCheckPayload() {
}

func __unmarshalSchemaCheckSchemaCheckSchemaCheckPayload(b []byte, v *SchemaCheckSchemaCheckSchemaCheckPayload) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "GitHubSchemaCheckError":
		*v = new(SchemaCheckSchemaCheckGitHubSchemaCheckError)
		return json.Unmarshal(b, *v)
	case "GitHubSchemaCheckSuccess":
		*v = new(SchemaCheckSchemaCheckGitHubSchemaCheckSuccess)
		return json.Unmarshal(b, *v)
	case "SchemaCheckError":
		*v = new(SchemaCheckSchemaCheckSchemaCheckError)
		return json.Unmarshal(b, *v)
	case "SchemaCheckSuccess":
		*v = new(SchemaCheckSchemaCheckSchemaCheckSuccess)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing SchemaCheckPayload.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for SchemaCheckSchemaCheckSchemaCheckPayload: "%v"`, tn.TypeName)
	}
}

func __marshalSchemaCheckSchemaCheckSchemaCheckPayload(v *SchemaCheckSchemaCheckSchemaCheckPayload) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *SchemaCheckSchemaCheckGitHubSchemaCheckError:
		typename = "GitHubSchemaCheckError"

		result := struct {
			TypeName string `json:"__typename"`
			*SchemaCheckSchemaCheckGitHubSchemaCheckError
		}{typename, v}
		return json.Marshal(result)
	case *SchemaCheckSchemaCheckGitHubSchemaCheckSuccess:
		typename = "GitHubSchemaCheckSuccess"

		result := struct {
			TypeName string `json:"__typename"`
			*SchemaCheckSchemaCheckGitHubSchemaCheckSuccess
		}{typename, v}
		return json.Marshal(result)
	case *SchemaCheckSchemaCheckSchemaCheckError:
		typename = "SchemaCheckError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalSchemaCheckSchemaCheckSchemaCheckError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *SchemaCheckSchemaCheckSchemaCheckSuccess:
		typename = "SchemaCheckSuccess"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalSchemaCheckSchemaCheckSchemaCheckSuccess
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for SchemaCheckSchemaCheckSchemaCheckPayload: "%T"`, v)
	}
}

// SchemaCheckSchemaCheckSchemaCheckSuccess includes the requested fields of the GraphQL type SchemaCheckSuccess.
type SchemaCheckSchemaCheckSchemaCheckSuccess struct {
	Typename    string                                              `json:"__typename"`
	Valid       bool                                                `json:"valid"`
	Initial     bool                                                `json:"initial"`
	SchemaCheck SchemaCheckSchemaCheckSchemaCheckSuccessSchemaCheck `json:"-"`
}

// GetTypename returns SchemaCheckSchemaCheckSchemaCheckSuccess.Typename, and is useful for accessing the field via an interface.
func (v *SchemaCheckSchemaCheckSchemaCheckSuccess) GetTypename() string { return v.Typename }

// GetValid returns SchemaCheckSchemaCheckSchemaCheckSuccess.Valid, and is useful for accessing the field via an interface.
func (v *SchemaCheckSchemaCheckSchemaCheckSuccess) GetValid() bool { return v.Valid }

// GetInitial returns SchemaCheckSchemaCheckSchemaCheckSuccess.Initial, and is useful for accessing the field via an interface.
func (v *SchemaCheckSchemaCheckSchemaCheckSuccess) GetInitial() bool { return v.Initial }

// GetSchemaCheck returns SchemaCheckSchemaCheckSchemaCheckSuccess.SchemaCheck, and is useful for accessing the field via an interface.
func (v *SchemaCheckSchemaCheckSchemaCheckSuccess) GetSchemaCheck() SchemaCheckSchemaCheckSchemaCheckSuccessSchemaCheck {
	return v.SchemaCheck
}

func (v *SchemaCheckSchemaCheckSchemaCheckSuccess) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*SchemaCheckSchemaCheckSchemaCheckSuccess
		SchemaCheck json.RawMessage `json:"schemaCheck"`
		graphql.NoUnmarshalJSON
	}
	firstPass.SchemaCheckSchemaCheckSchemaCheckSuccess = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.SchemaCheck
		src := firstPass.SchemaCheck
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalSchemaCheckSchemaCheckSchemaCheckSuccessSchemaCheck(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal SchemaCheckSchemaCheckSchemaCheckSuccess.SchemaCheck: %w", err)
			}
		}
	}
	return nil
}

type __premarshalSchemaCheckSchemaCheckSchemaCheckSuccess struct {
	Typename string `json:"__typename"`

	Valid bool `json:"valid"`

	Initial bool `json:"initial"`

	SchemaCheck json.RawMessage `json:"schemaCheck"`
}

func (v *SchemaCheckSchemaCheckSchemaCheckSuccess) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *SchemaCheckSchemaCheckSchemaCheckSuccess) __premarshalJSON() (*__premarshalSchemaCheckSchemaCheckSchemaCheckSuccess, error) {
	var retval __premarshalSchemaCheckSchemaCheckSchemaCheckSuccess

	retval.Typename = v.Typename
	retval.Valid = v.Valid
	retval.Initial = v.Initial
	{

		dst := &retval.SchemaCheck
		src := v.SchemaCheck
		var err error
		*dst, err = __marshalSchemaCheckSchemaCheckSchemaCheckSuccessSchemaCheck(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal SchemaCheckSchemaCheckSchemaCheckSuccess.SchemaCheck: %w", err)
		}
	}
	return &retval, nil
}

// SchemaCheckSchemaCheckSchemaCheckSuccessSchemaCheck includes the requested fields of the GraphQL interface SchemaCheck.
//
// SchemaCheckSchemaCheckSchemaCheckSuccessSchemaCheck is implemented by the following types:
// SchemaCheckSchemaCheckSchemaCheckSuccessSchemaCheckFailedSchemaCheck
// SchemaCheckSchemaCheckSchemaCheckSuccessSchemaCheckSuccessfulSchemaCheck
type SchemaCheckSchemaCheckSchemaCheckSuccessSchemaCheck interface {
	implementsGraphQLInterfaceSchemaCheckSchemaCheckSchemaCheckSuccessSchemaCheck()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	// GetId returns the interface-field "id" from its implementation.
	GetId() string
	// GetWebUrl returns the interface-field "webUrl" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// The URL of the schema check on the Hive Web App.
	GetWebUrl() string
}

func (v *SchemaCheckSchemaCheckSchemaCheckSuccessSchemaCheckFailedSchemaCheck) implementsGraphQLInterfaceSchemaCheckSchemaCheckSchemaCheckSuccessSchemaCheck() {
}
func (v *SchemaCheckSchemaCheckSchemaCheckSuccessSchemaCheckSuccessfulSchemaCheck) implementsGraphQLInterfaceSchemaCheckSchemaCheckSchemaCheckSuccessSchemaCheck() {
}

func __unmarshalSchemaCheckSchemaCheckSchemaCheckSuccessSchemaCheck(b []byte, v *SchemaCheckSchemaCheckSchemaCheckSuccessSchemaCheck) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "FailedSchemaCheck":
		*v = new(SchemaCheckSchemaCheckSchemaCheckSuccessSchemaCheckFailedSchemaCheck)
		return json.Unmarshal(b, *v)
	case "SuccessfulSchemaCheck":
		*v = new(SchemaCheckSchemaCheckSchemaCheckSuccessSchemaCheckSuccessfulSchemaCheck)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing SchemaCheck.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for SchemaCheckSchemaCheckSchemaCheckSuccessSchemaCheck: "%v"`, tn.TypeName)
	}
}

func __marshalSchemaCheckSchemaCheckSchemaCheckSuccessSchemaCheck(v *SchemaCheckSchemaCheckSchemaCheckSuccessSchemaCheck) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *SchemaCheckSchemaCheckSchemaCheckSuccessSchemaCheckFailedSchemaCheck:
		typename = "FailedSchemaCheck"

		result := struct {
			TypeName string `json:"__typename"`
			*SchemaCheckSchemaCheckSchemaCheckSuccessSchemaCheckFailedSchemaCheck
		}{typename, v}
		return json.Marshal(result)
	case *SchemaCheckSchemaCheckSchemaCheckSuccessSchemaCheckSuccessfulSchemaCheck:
		typename = "SuccessfulSchemaCheck"

		result := struct {
			TypeName string `json:"__typename"`
			*SchemaCheckSchemaCheckSchemaCheckSuccessSchemaCheckSuccessfulSchemaCheck
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for SchemaCheckSchemaCheckSchemaCheckSuccessSchemaCheck: "%T"`, v)
	}
}

// SchemaCheckSchemaCheckSchemaCheckSuccessSchemaCheckFailedSchemaCheck includes the requested fields of the GraphQL type FailedSchemaCheck.
// The GraphQL type's documentation follows.
//
// A failed schema check.
type SchemaCheckSchemaCheckSchemaCheckSuccessSchemaCheckFailedSchemaCheck struct {
	Typename string `json:"__typename"`
	Id       string `json:"id"`
	// The URL of the schema check on the Hive Web App.
	WebUrl string `json:"webUrl"`
}

// GetTypename returns SchemaCheckSchemaCheckSchemaCheckSuccessSchemaCheckFailedSchemaCheck.Typename, and is useful for accessing the field via an interface.
func (v *SchemaCheckSchemaCheckSchemaCheckSuccessSchemaCheckFailedSchemaCheck) GetTypename() string {
	return v.Typename
}

// GetId returns SchemaCheckSchemaCheckSchemaCheckSuccessSchemaCheckFailedSchemaCheck.Id, and is useful for accessing the field via an interface.
func (v *SchemaCheckSchemaCheckSchemaCheckSuccessSchemaCheckFailedSchemaCheck) GetId() string {
	return v.Id
}

// GetWebUrl returns SchemaCheckSchemaCheckSchemaCheckSuccessSchemaCheckFailedSchemaCheck.WebUrl, and is useful for accessing the field via an interface.
func (v *SchemaCheckSchemaCheckSchemaCheckSuccessSchemaCheckFailedSchemaCheck) GetWebUrl() string {
	return v.WebUrl
}

// SchemaCheckSchemaCheckSchemaCheckSuccessSchemaCheckSuccessfulSchemaCheck includes the requested fields of the GraphQL type SuccessfulSchemaCheck.
// The GraphQL type's documentation follows.
//
// A successful schema check.
type SchemaCheckSchemaCheckSchemaCheckSuccessSchemaCheckSuccessfulSchemaCheck struct {
	Typename string `json:"__typename"`
	Id       string `json:"id"`
	// The URL of the schema check on the Hive Web App.
	WebUrl string `json:"webUrl"`
}

// GetTypename returns SchemaCheckSchemaCheckSchemaCheckSuccessSchemaCheckSuccessfulSchemaCheck.Typename, and is useful for accessing the field via an interface.
func (v *SchemaCheckSchemaCheckSchemaCheckSuccessSchemaCheckSuccessfulSchemaCheck) GetTypename() string {
	return v.Typename
}

// GetId returns SchemaCheckSchemaCheckSchemaCheckSuccessSchemaCheckSuccessfulSchemaCheck.Id, and is useful for accessing the field via an interface.
func (v *SchemaCheckSchemaCheckSchemaCheckSuccessSchemaCheckSuccessfulSchemaCheck) GetId() string {
	return v.Id
}

// GetWebUrl returns SchemaCheckSchemaCheckSchemaCheckSuccessSchemaCheckSuccessfulSchemaCheck.WebUrl, and is useful for accessing the field via an interface.
func (v *SchemaCheckSchemaCheckSchemaCheckSuccessSchemaCheckSuccessfulSchemaCheck) GetWebUrl() string {
	return v.WebUrl
}

type SchemaPublishGitHubInput struct {
	// The commit sha.
	Commit string `json:"commit"`
	// The repository name.
	Repository string `json:"repository"`
}

// GetCommit returns SchemaPublishGitHubInput.Commit, and is useful for accessing the field via an interface.
func (v *SchemaPublishGitHubInput) GetCommit() string { return v.Commit }

// GetRepository returns SchemaPublishGitHubInput.Repository, and is useful for accessing the field via an interface.
func (v *SchemaPublishGitHubInput) GetRepository() string { return v.Repository }

type SchemaPublishInput struct {
	Author string `json:"author"`
	Commit string `json:"commit"`
	// Accept breaking changes and mark schema as valid (if composable)
	Experimental_acceptBreakingChanges bool `json:"experimental_acceptBreakingChanges"`
	Force                              bool `json:"force"`
	// Link GitHub version to a GitHub commit on a repository.
	GitHub *SchemaPublishGitHubInput `json:"gitHub,omitempty"`
	// Talk to GitHub Application and create a check-run
	Github   bool   `json:"github"`
	Metadata string `json:"metadata"`
	Sdl      string `json:"sdl"`
	Service  string `json:"service"`
	// Whether the CLI supports retrying the schema publish, in case acquiring the schema publish lock fails due to a busy queue.
	SupportsRetry bool                  `json:"supportsRetry"`
	Target        *TargetReferenceInput `json:"target,omitempty"`
	Url           string                `json:"url"`
}

// GetAuthor returns SchemaPublishInput.Author, and is useful for accessing the field via an interface.
func (v *SchemaPublishInput) GetAuthor() string { return v.Author }

// GetCommit returns SchemaPublishInput.Commit, and is useful for accessing the field via an interface.
func (v *SchemaPublishInput) GetCommit() string { return v.Commit }

// GetExperimental_acceptBreakingChanges returns SchemaPublishInput.Experimental_acceptBreakingChanges, and is useful for accessing the field via an interface.
func (v *SchemaPublishInput) GetExperimental_acceptBreakingChanges() bool {
	return v.Experimental_acceptBreakingChanges
}

// GetForce returns SchemaPublishInput.Force, and is useful for accessing the field via an interface.
func (v *SchemaPublishInput) GetForce() bool { return v.Force }

// GetGitHub returns SchemaPublishInput.GitHub, and is useful for accessing the field via an interface.
func (v *SchemaPublishInput) GetGitHub() *SchemaPublishGitHubInput { return v.GitHub }

// GetGithub returns SchemaPublishInput.Github, and is useful for accessing the field via an interface.
func (v *SchemaPublishInput) GetGithub() bool { return v.Github }

// GetMetadata returns SchemaPublishInput.Metadata, and is useful for accessing the field via an interface.
func (v *SchemaPublishInput) GetMetadata() string { return v.Metadata }

// GetSdl returns SchemaPublishInput.Sdl, and is useful for accessing the field via an interface.
func (v *SchemaPublishInput) GetSdl() string { return v.Sdl }

// GetService returns SchemaPublishInput.Service, and is useful for accessing the field via an interface.
func (v *SchemaPublishInput) GetService() string { return v.Service }

// GetSupportsRetry returns SchemaPublishInput.SupportsRetry, and is useful for accessing the field via an interface.
func (v *SchemaPublishInput) GetSupportsRetry() bool { return v.SupportsRetry }

// GetTarget returns SchemaPublishInput.Target, and is useful for accessing the field via an interface.
func (v *SchemaPublishInput) GetTarget() *TargetReferenceInput { return v.Target }

// GetUrl returns SchemaPublishInput.Url, and is useful for accessing the field via an interface.
func (v *SchemaPublishInput) GetUrl() string { return v.Url }

// SchemaPublishResponse is returned by SchemaPublish on success.
type SchemaPublishResponse struct {
	SchemaPublish SchemaPublishSchemaPublishSchemaPublishPayload `json:"-"`
}

// GetSchemaPublish returns SchemaPublishResponse.SchemaPublish, and is useful for accessing the field via an interface.
func (v *SchemaPublishResponse) GetSchemaPublish() SchemaPublishSchemaPublishSchemaPublishPayload {
	return v.SchemaPublish
}

func (v *SchemaPublishResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*SchemaPublishResponse
		SchemaPublish json.RawMessage `json:"schemaPublish"`
		graphql.NoUnmarshalJSON
	}
	firstPass.SchemaPublishResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.SchemaPublish
		src := firstPass.SchemaPublish
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalSchemaPublishSchemaPublishSchemaPublishPayload(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal SchemaPublishResponse.SchemaPublish: %w", err)
			}
		}
	}
	return nil
}

type __premarshalSchemaPublishResponse struct {
	SchemaPublish json.RawMessage `json:"schemaPublish"`
}

func (v *SchemaPublishResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *SchemaPublishResponse) __premarshalJSON() (*__premarshalSchemaPublishResponse, error) {
	var retval __premarshalSchemaPublishResponse

	{

		dst := &retval.SchemaPublish
		src := v.SchemaPublish
		var err error
		*dst, err = __marshalSchemaPublishSchemaPublishSchemaPublishPayload(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal SchemaPublishResponse.SchemaPublish: %w", err)
		}
	}
	return &retval, nil
}

// SchemaPublishSchemaPublishGitHubSchemaPublishError includes the requested fields of the GraphQL type GitHubSchemaPublishError.
type SchemaPublishSchemaPublishGitHubSchemaPublishError struct {
	Typename string `json:"__typename"`
	Message  string `json:"message"`
}

// GetTypename returns SchemaPublishSchemaPublishGitHubSchemaPublishError.Typename, and is useful for accessing the field via an interface.
func (v *SchemaPublishSchemaPublishGitHubSchemaPublishError) GetTypename() string { return v.Typename }

// GetMessage returns SchemaPublishSchemaPublishGitHubSchemaPublishError.Message, and is useful for accessing the field via an interface.
func (v *SchemaPublishSchemaPublishGitHubSchemaPublishError) GetMessage() string { return v.Message }

// SchemaPublishSchemaPublishGitHubSchemaPublishSuccess includes the requested fields of the GraphQL type GitHubSchemaPublishSuccess.
type SchemaPublishSchemaPublishGitHubSchemaPublishSuccess struct {
	Typename string `json:"__typename"`
	Message  string `json:"message"`
}

// GetTypename returns SchemaPublishSchemaPublishGitHubSchemaPublishSuccess.Typename, and is useful for accessing the field via an interface.
func (v *SchemaPublishSchemaPublishGitHubSchemaPublishSuccess) GetTypename() string {
	return v.Typename
}

// GetMessage returns SchemaPublishSchemaPublishGitHubSchemaPublishSuccess.Message, and is useful for accessing the field via an interface.
func (v *SchemaPublishSchemaPublishGitHubSchemaPublishSuccess) GetMessage() string { return v.Message }

// SchemaPublishSchemaPublishSchemaPublishError includes the requested fields of the GraphQL type SchemaPublishError.
type SchemaPublishSchemaPublishSchemaPublishError struct {
	Typename      string                                                                  `json:"__typename"`
	Valid         bool                                                                    `json:"valid"`
	LinkToWebsite string                                                                  `json:"linkToWebsite"`
	Errors        SchemaPublishSchemaPublishSchemaPublishErrorErrorsSchemaErrorConnection `json:"errors"`
}

// GetTypename returns SchemaPublishSchemaPublishSchemaPublishError.Typename, and is useful for accessing the field via an interface.
func (v *SchemaPublishSchemaPublishSchemaPublishError) GetTypename() string { return v.Typename }

// GetValid returns SchemaPublishSchemaPublishSchemaPublishError.Valid, and is useful for accessing the field via an interface.
func (v *SchemaPublishSchemaPublishSchemaPublishError) GetValid() bool { return v.Valid }

// GetLinkToWebsite returns SchemaPublishSchemaPublishSchemaPublishError.LinkToWebsite, and is useful for accessing the field via an interface.
func (v *SchemaPublishSchemaPublishSchemaPublishError) GetLinkToWebsite() string {
	return v.LinkToWebsite
}

// GetErrors returns SchemaPublishSchemaPublishSchemaPublishError.Errors, and is useful for accessing the field via an interface.
func (v *SchemaPublishSchemaPublishSchemaPublishError) GetErrors() SchemaPublishSchemaPublishSchemaPublishErrorErrorsSchemaErrorConnection {
	return v.Errors
}

// SchemaPublishSchemaPublishSchemaPublishErrorErrorsSchemaErrorConnection includes the requested fields of the GraphQL type SchemaErrorConnection.
type SchemaPublishSchemaPublishSchemaPublishErrorErrorsSchemaErrorConnection struct {
	Nodes []SchemaPublishSchemaPublishSchemaPublishErrorErrorsSchemaErrorConnectionNodesSchemaError `json:"nodes"`
	Total int                                                                                       `json:"total"`
}

// GetNodes returns SchemaPublishSchemaPublishSchemaPublishErrorErrorsSchemaErrorConnection.Nodes, and is useful for accessing the field via an interface.
func (v *SchemaPublishSchemaPublishSchemaPublishErrorErrorsSchemaErrorConnection) GetNodes() []SchemaPublishSchemaPublishSchemaPublishErrorErrorsSchemaErrorConnectionNodesSchemaError {
	return v.Nodes
}

// GetTotal returns SchemaPublishSchemaPublishSchemaPublishErrorErrorsSchemaErrorConnection.Total, and is useful for accessing the field via an interface.
func (v *SchemaPublishSchemaPublishSchemaPublishErrorErrorsSchemaErrorConnection) GetTotal() int {
	return v.Total
}

// SchemaPublishSchemaPublishSchemaPublishErrorErrorsSchemaErrorConnectionNodesSchemaError includes the requested fields of the GraphQL type SchemaError.
type SchemaPublishSchemaPublishSchemaPublishErrorErrorsSchemaErrorConnectionNodesSchemaError struct {
	Message string `json:"message"`
}

// GetMessage returns SchemaPublishSchemaPublishSchemaPublishErrorErrorsSchemaErrorConnectionNodesSchemaError.Message, and is useful for accessing the field via an interface.
func (v *SchemaPublishSchemaPublishSchemaPublishErrorErrorsSchemaErrorConnectionNodesSchemaError) GetMessage() string {
	return v.Message
}

// SchemaPublishSchemaPublishSchemaPublishMissingServiceError includes the requested fields of the GraphQL type SchemaPublishMissingServiceError.
type SchemaPublishSchemaPublishSchemaPublishMissingServiceError struct {
	Typename string `json:"__typename"`
	Message  string `json:"message"`
}

// GetTypename returns SchemaPublishSchemaPublishSchemaPublishMissingServiceError.Typename, and is useful for accessing the field via an interface.
func (v *SchemaPublishSchemaPublishSchemaPublishMissingServiceError) GetTypename() string {
	return v.Typename
}

// GetMessage returns SchemaPublishSchemaPublishSchemaPublishMissingServiceError.Message, and is useful for accessing the field via an interface.
func (v *SchemaPublishSchemaPublishSchemaPublishMissingServiceError) GetMessage() string {
	return v.Message
}

// SchemaPublishSchemaPublishSchemaPublishMissingUrlError includes the requested fields of the GraphQL type SchemaPublishMissingUrlError.
type SchemaPublishSchemaPublishSchemaPublishMissingUrlError struct {
	Typename string `json:"__typename"`
	Message  string `json:"message"`
}

// GetTypename returns SchemaPublishSchemaPublishSchemaPublishMissingUrlError.Typename, and is useful for accessing the field via an interface.
func (v *SchemaPublishSchemaPublishSchemaPublishMissingUrlError) GetTypename() string {
	return v.Typename
}

// GetMessage returns SchemaPublishSchemaPublishSchemaPublishMissingUrlError.Message, and is useful for accessing the field via an interface.
func (v *SchemaPublishSchemaPublishSchemaPublishMissingUrlError) GetMessage() string {
	return v.Message
}

// SchemaPublishSchemaPublishSchemaPublishPayload includes the requested fields of the GraphQL interface SchemaPublishPayload.
//
// SchemaPublishSchemaPublishSchemaPublishPayload is implemented by the following types:
// SchemaPublishSchemaPublishGitHubSchemaPublishError
// SchemaPublishSchemaPublishGitHubSchemaPublishSuccess
// SchemaPublishSchemaPublishSchemaPublishError
// SchemaPublishSchemaPublishSchemaPublishMissingServiceError
// SchemaPublishSchemaPublishSchemaPublishMissingUrlError
// SchemaPublishSchemaPublishSchemaPublishRetry
// SchemaPublishSchemaPublishSchemaPublishSuccess
type SchemaPublishSchemaPublishSchemaPublishPayload interface {
	implementsGraphQLInterfaceSchemaPublishSchemaPublishSchemaPublishPayload()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *SchemaPublishSchemaPublishGitHubSchemaPublishError) implementsGraphQLInterfaceSchemaPublishSchemaPublishSchemaPublishPayload() {
}
func (v *SchemaPublishSchemaPublishGitHubSchemaPublishSuccess) implementsGraphQLInterfaceSchemaPublishSchemaPublishSchemaPublishPayload() {
}
func (v *SchemaPublishSchemaPublishSchemaPublishError) implementsGraphQLInterfaceSchemaPublishSchemaPublishSchemaPublishPayload() {
}
func (v *SchemaPublishSchemaPublishSchemaPublishMissingServiceError) implementsGraphQLInterfaceSchemaPublishSchemaPublishSchemaPublishPayload() {
}
func (v *SchemaPublishSchemaPublishSchemaPublishMissingUrlError) implementsGraphQLInterfaceSchemaPublishSchemaPublishSchemaPublishPayload() {
}
func (v *SchemaPublishSchemaPublishSchemaPublishRetry) implementsGraphQLInterfaceSchemaPublishSchemaPublishSchemaPublishPayload() {
}
func (v *SchemaPublishSchemaPublishSchemaPublishSuccess) implementsGraphQLInterfaceSchemaPublishSchemaPublishSchemaPublishPayload() {
}

func __unmarshalSchemaPublishSchemaPublishSchemaPublishPayload(b []byte, v *SchemaPublishSchemaPublishSchemaPublishPayload) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "GitHubSchemaPublishError":
		*v = new(SchemaPublishSchemaPublishGitHubSchemaPublishError)
		return json.Unmarshal(b, *v)
	case "GitHubSchemaPublishSuccess":
		*v = new(SchemaPublishSchemaPublishGitHubSchemaPublishSuccess)
		return json.Unmarshal(b, *v)
	case "SchemaPublishError":
		*v = new(SchemaPublishSchemaPublishSchemaPublishError)
		return json.Unmarshal(b, *v)
	case "SchemaPublishMissingServiceError":
		*v = new(SchemaPublishSchemaPublishSchemaPublishMissingServiceError)
		return json.Unmarshal(b, *v)
	case "SchemaPublishMissingUrlError":
		*v = new(SchemaPublishSchemaPublishSchemaPublishMissingUrlError)
		return json.Unmarshal(b, *v)
	case "SchemaPublishRetry":
		*v = new(SchemaPublishSchemaPublishSchemaPublishRetry)
		return json.Unmarshal(b, *v)
	case "SchemaPublishSuccess":
		*v = new(SchemaPublishSchemaPublishSchemaPublishSuccess)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing SchemaPublishPayload.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for SchemaPublishSchemaPublishSchemaPublishPayload: "%v"`, tn.TypeName)
	}
}

func __marshalSchemaPublishSchemaPublishSchemaPublishPayload(v *SchemaPublishSchemaPublishSchemaPublishPayload) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *SchemaPublishSchemaPublishGitHubSchemaPublishError:
		typename = "GitHubSchemaPublishError"

		result := struct {
			TypeName string `json:"__typename"`
			*SchemaPublishSchemaPublishGitHubSchemaPublishError
		}{typename, v}
		return json.Marshal(result)
	case *SchemaPublishSchemaPublishGitHubSchemaPublishSuccess:
		typename = "GitHubSchemaPublishSuccess"

		result := struct {
			TypeName string `json:"__typename"`
			*SchemaPublishSchemaPublishGitHubSchemaPublishSuccess
		}{typename, v}
		return json.Marshal(result)
	case *SchemaPublishSchemaPublishSchemaPublishError:
		typename = "SchemaPublishError"

		result := struct {
			TypeName string `json:"__typename"`
			*SchemaPublishSchemaPublishSchemaPublishError
		}{typename, v}
		return json.Marshal(result)
	case *SchemaPublishSchemaPublishSchemaPublishMissingServiceError:
		typename = "SchemaPublishMissingServiceError"

		result := struct {
			TypeName string `json:"__typename"`
			*SchemaPublishSchemaPublishSchemaPublishMissingServiceError
		}{typename, v}
		return json.Marshal(result)
	case *SchemaPublishSchemaPublishSchemaPublishMissingUrlError:
		typename = "SchemaPublishMissingUrlError"

		result := struct {
			TypeName string `json:"__typename"`
			*SchemaPublishSchemaPublishSchemaPublishMissingUrlError
		}{typename, v}
		return json.Marshal(result)
	case *SchemaPublishSchemaPublishSchemaPublishRetry:
		typename = "SchemaPublishRetry"

		result := struct {
			TypeName string `json:"__typename"`
			*SchemaPublishSchemaPublishSchemaPublishRetry
		}{typename, v}
		return json.Marshal(result)
	case *SchemaPublishSchemaPublishSchemaPublishSuccess:
		typename = "SchemaPublishSuccess"

		result := struct {
			TypeName string `json:"__typename"`
			*SchemaPublishSchemaPublishSchemaPublishSuccess
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for SchemaPublishSchemaPublishSchemaPublishPayload: "%T"`, v)
	}
}

// SchemaPublishSchemaPublishSchemaPublishRetry includes the requested fields of the GraphQL type SchemaPublishRetry.
type SchemaPublishSchemaPublishSchemaPublishRetry struct {
	Typename string `json:"__typename"`
	Reason   string `json:"reason"`
}

// GetTypename returns SchemaPublishSchemaPublishSchemaPublishRetry.Typename, and is useful for accessing the field via an interface.
func (v *SchemaPublishSchemaPublishSchemaPublishRetry) GetTypename() string { return v.Typename }

// GetReason returns SchemaPublishSchemaPublishSchemaPublishRetry.Reason, and is useful for accessing the field via an interface.
func (v *SchemaPublishSchemaPublishSchemaPublishRetry) GetReason() string { return v.Reason }

// SchemaPublishSchemaPublishSchemaPublishSuccess includes the requested fields of the GraphQL type SchemaPublishSuccess.
type SchemaPublishSchemaPublishSchemaPublishSuccess struct {
	Typename       string `json:"__typename"`
	Initial        bool   `json:"initial"`
	Valid          bool   `json:"valid"`
	SuccessMessage string `json:"successMessage"`
	LinkToWebsite  string `json:"linkToWebsite"`
}

// GetTypename returns SchemaPublishSchemaPublishSchemaPublishSuccess.Typename, and is useful for accessing the field via an interface.
func (v *SchemaPublishSchemaPublishSchemaPublishSuccess) GetTypename() string { return v.Typename }

// GetInitial returns SchemaPublishSchemaPublishSchemaPublishSuccess.Initial, and is useful for accessing the field via an interface.
func (v *SchemaPublishSchemaPublishSchemaPublishSuccess) GetInitial() bool { return v.Initial }

// GetValid returns SchemaPublishSchemaPublishSchemaPublishSuccess.Valid, and is useful for accessing the field via an interface.
func (v *SchemaPublishSchemaPublishSchemaPublishSuccess) GetValid() bool { return v.Valid }

// GetSuccessMessage returns SchemaPublishSchemaPublishSchemaPublishSuccess.SuccessMessage, and is useful for accessing the field via an interface.
func (v *SchemaPublishSchemaPublishSchemaPublishSuccess) GetSuccessMessage() string {
	return v.SuccessMessage
}

// GetLinkToWebsite returns SchemaPublishSchemaPublishSchemaPublishSuccess.LinkToWebsite, and is useful for accessing the field via an interface.
func (v *SchemaPublishSchemaPublishSchemaPublishSuccess) GetLinkToWebsite() string {
	return v.LinkToWebsite
}

// Reference to a target.
type TargetReferenceInput struct {
	BySelector TargetSelectorInput `json:"bySelector"`
}

// GetBySelector returns TargetReferenceInput.BySelector, and is useful for accessing the field via an interface.
func (v *TargetReferenceInput) GetBySelector() TargetSelectorInput { return v.BySelector }

type TargetSelectorInput struct {
	OrganizationSlug string `json:"organizationSlug"`
	ProjectSlug      string `json:"projectSlug"`
	TargetSlug       string `json:"targetSlug"`
}

// GetOrganizationSlug returns TargetSelectorInput.OrganizationSlug, and is useful for accessing the field via an interface.
func (v *TargetSelectorInput) GetOrganizationSlug() string { return v.OrganizationSlug }

// GetProjectSlug returns TargetSelectorInput.ProjectSlug, and is useful for accessing the field via an interface.
func (v *TargetSelectorInput) GetProjectSlug() string { return v.ProjectSlug }

// GetTargetSlug returns TargetSelectorInput.TargetSlug, and is useful for accessing the field via an interface.
func (v *TargetSelectorInput) GetTargetSlug() string { return v.TargetSlug }

// __ActivateAppDeploymentInput is used internally by genqlient
type __ActivateAppDeploymentInput struct {
	Input ActivateAppDeploymentInput `json:"input"`
}

// GetInput returns __ActivateAppDeploymentInput.Input, and is useful for accessing the field via an interface.
func (v *__ActivateAppDeploymentInput) GetInput() ActivateAppDeploymentInput { return v.Input }

// __AddDocumentsToAppDeploymentInput is used internally by genqlient
type __AddDocumentsToAppDeploymentInput struct {
	Input AddDocumentsToAppDeploymentInput `json:"input"`
}

// GetInput returns __AddDocumentsToAppDeploymentInput.Input, and is useful for accessing the field via an interface.
func (v *__AddDocumentsToAppDeploymentInput) GetInput() AddDocumentsToAppDeploymentInput {
	return v.Input
}

// __CreateAppDeploymentInput is used internally by genqlient
type __CreateAppDeploymentInput struct {
	Input CreateAppDeploymentInput `json:"input"`
}

// GetInput returns __CreateAppDeploymentInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateAppDeploymentInput) GetInput() CreateAppDeploymentInput { return v.Input }

// __SchemaCheckInput is used internally by genqlient
type __SchemaCheckInput struct {
	Input SchemaCheckInput `json:"input"`
}

// GetInput returns __SchemaCheckInput.Input, and is useful for accessing the field via an interface.
func (v *__SchemaCheckInput) GetInput() SchemaCheckInput { return v.Input }

// __SchemaPublishInput is used internally by genqlient
type __SchemaPublishInput struct {
	Input         SchemaPublishInput `json:"input"`
	UsesGitHubApp bool               `json:"usesGitHubApp"`
}

// GetInput returns __SchemaPublishInput.Input, and is useful for accessing the field via an interface.
func (v *__SchemaPublishInput) GetInput() SchemaPublishInput { return v.Input }

// GetUsesGitHubApp returns __SchemaPublishInput.UsesGitHubApp, and is useful for accessing the field via an interface.
func (v *__SchemaPublishInput) GetUsesGitHubApp() bool { return v.UsesGitHubApp }

// The mutation executed by ActivateAppDeployment.
const ActivateAppDeployment_Operation = `
mutation ActivateAppDeployment ($input: ActivateAppDeploymentInput!) {
	activateAppDeployment(input: $input) {
		ok {
			activatedAppDeployment {
				id
				name
				version
				status
			}
			isSkipped
		}
		error {
			message
		}
	}
}
`

func ActivateAppDeployment(
	ctx_ context.Context,
	client_ graphql.Client,
	input ActivateAppDeploymentInput,
) (data_ *ActivateAppDeploymentResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "ActivateAppDeployment",
		Query:  ActivateAppDeployment_Operation,
		Variables: &__ActivateAppDeploymentInput{
			Input: input,
		},
	}

	data_ = &ActivateAppDeploymentResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by AddDocumentsToAppDeployment.
const AddDocumentsToAppDeployment_Operation = `
mutation AddDocumentsToAppDeployment ($input: AddDocumentsToAppDeploymentInput!) {
	addDocumentsToAppDeployment(input: $input) {
		ok {
			appDeployment {
				id
				name
				version
				status
			}
		}
		error {
			message
			details {
				index
				message
				__typename
			}
		}
	}
}
`

func AddDocumentsToAppDeployment(
	ctx_ context.Context,
	client_ graphql.Client,
	input AddDocumentsToAppDeploymentInput,
) (data_ *AddDocumentsToAppDeploymentResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "AddDocumentsToAppDeployment",
		Query:  AddDocumentsToAppDeployment_Operation,
		Variables: &__AddDocumentsToAppDeploymentInput{
			Input: input,
		},
	}

	data_ = &AddDocumentsToAppDeploymentResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by CreateAppDeployment.
const CreateAppDeployment_Operation = `
mutation CreateAppDeployment ($input: CreateAppDeploymentInput!) {
	createAppDeployment(input: $input) {
		ok {
			createdAppDeployment {
				id
				name
				version
				status
			}
		}
		error {
			message
		}
	}
}
`

func CreateAppDeployment(
	ctx_ context.Context,
	client_ graphql.Client,
	input CreateAppDeploymentInput,
) (data_ *CreateAppDeploymentResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "CreateAppDeployment",
		Query:  CreateAppDeployment_Operation,
		Variables: &__CreateAppDeploymentInput{
			Input: input,
		},
	}

	data_ = &CreateAppDeploymentResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by SchemaCheck.
const SchemaCheck_Operation = `
mutation SchemaCheck ($input: SchemaCheckInput!) {
	schemaCheck(input: $input) {
		__typename
		... on SchemaCheckSuccess {
			valid
			initial
			schemaCheck {
				__typename
				id
				webUrl
			}
		}
		... on SchemaCheckError {
			valid
			errors {
				nodes {
					message
				}
				total
			}
			schemaCheck {
				__typename
				id
				webUrl
			}
		}
		... on GitHubSchemaCheckSuccess {
			message
		}
		... on GitHubSchemaCheckError {
			message
		}
	}
}
`

func SchemaCheck(
	ctx_ context.Context,
	client_ graphql.Client,
	input SchemaCheckInput,
) (data_ *SchemaCheckResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "SchemaCheck",
		Query:  SchemaCheck_Operation,
		Variables: &__SchemaCheckInput{
			Input: input,
		},
	}

	data_ = &SchemaCheckResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by SchemaPublish.
const SchemaPublish_Operation = `
mutation SchemaPublish ($input: SchemaPublishInput!, $usesGitHubApp: Boolean!) {
	schemaPublish(input: $input) {
		__typename
		... on SchemaPublishSuccess @skip(if: $usesGitHubApp) {
			initial
			valid
			successMessage: message
			linkToWebsite
		}
		... on SchemaPublishError @skip(if: $usesGitHubApp) {
			valid
			linkToWebsite
			errors {
				nodes {
					message
				}
				total
			}
		}
		... on SchemaPublishMissingServiceError @skip(if: $usesGitHubApp) {
			message
		}
		... on SchemaPublishMissingUrlError @skip(if: $usesGitHubApp) {
			message
		}
		... on GitHubSchemaPublishSuccess @include(if: $usesGitHubApp) {
			message
		}
		... on GitHubSchemaPublishError @include(if: $usesGitHubApp) {
			message
		}
		... on SchemaPublishRetry {
			reason
		}
	}
}
`

func SchemaPublish(
	ctx_ context.Context,
	client_ graphql.Client,
	input SchemaPublishInput,
	usesGitHubApp bool,
) (data_ *SchemaPublishResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "SchemaPublish",
		Query:  SchemaPublish_Operation,
		Variables: &__SchemaPublishInput{
			Input:         input,
			UsesGitHubApp: usesGitHubApp,
		},
	}

	data_ = &SchemaPublishResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}
